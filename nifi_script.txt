var flowFile = session.get(); 
if (flowFile != null) { 
  try {
  var StreamCallback = Java.type("org.apache.nifi.processor.io.StreamCallback") 
  var IOUtils = Java.type("org.apache.commons.io.IOUtils") 
  var StandardCharsets = Java.type("java.nio.charset.StandardCharsets") 
  var JString = Java.type("java.lang.String") 
  var TokenAttr = flowFile.getAttribute('token_value') 
  var JsonTokenAttr = JSON.parse(TokenAttr) 
  flowFile = session.write(flowFile, 
    new StreamCallback(function(inputStream, outputStream) { 
      var text = IOUtils.toString(inputStream, StandardCharsets.UTF_8) 
      var obj = JSON.parse(text) 
      var newObj = {}
      for (var key in obj) {
        var convertObj = "";
        if (obj.hasOwnProperty(key)) {
          if(typeof(obj[key]) == 'object' && key !== 'subject' && key !== 'publish_date' && obj[key] !== null){
            var objArray = obj[key];
            for(var i = 0; i < objArray.length; i++){
              var objArrayValue = String(objArray[i]);
              convertObj += objArrayValue.trim() + "|" 
            }
            newObj[key] = convertObj
          } else {
            newObj[key] = obj[key]
          }
        }
      }
      var builder = new JString() 
      outputStream.write(JSON.stringify(newObj, null, '\t').getBytes(StandardCharsets.UTF_8))
    })
  ) 
  session.transfer(flowFile, REL_SUCCESS) 
  } catch (e) {
    log.error('execute script error', e)
    session.transfer(flowFile, REL_FAILURE)
  }
  
}